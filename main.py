import telebot
from config import BOT_TOKEN
from telebot import types
import sqlite3
import logging
from telebot.types import WebAppInfo


bot = telebot.TeleBot(BOT_TOKEN)
name = ''
@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('nachos_bot.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), pass varchar(50))')
    conn.commit()
    cur.close()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    bt1 = types.InlineKeyboardButton('–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤', callback_data='choice')
    bt2 = types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help_section')
    bt3 = types.InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='registration')
    bt4 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É', web_app=WebAppInfo(url='https://music.apple.com/library/playlist/p.YJXV7dEIerGlxQ5'))
    markup.row(bt1, bt2)
    markup.row(bt3, bt4)
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n"
            "üéì –£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ!\n"
            "üëâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –ø–æ Python!\n",
        reply_markup=markup
    )

@bot.message_handler(content_types=['text'])
def greetings(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç!\n'
                              f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º')


@bot.message_handler(commands=['registration'])
def registration(message):
    if user_exists(message.chat.id):
        bot.send_message(
            message.chat.id,
            "<u>üö´ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</u>\n\n",
            parse_mode='html')

        return
    else:
        bot.send_message(
            message.chat.id,
            "<u>üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!</u>\n\n"
            "–î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!",
            parse_mode='html')
        bot.register_next_step_handler(message, user_name)


def user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(
        message.chat.id,
        f"<u>üîí –û—Ç–ª–∏—á–Ω–æ, {name}!</u> –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode='html')
    bot.register_next_step_handler(message, user_pass)


def user_pass(message):
    if len(str(message.text)) >= 6:
        password = str(message.text)
    else:
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!")
        bot.register_next_step_handler(message, user_pass)
        return 

    conn = sqlite3.connect('nachos_bot.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (name,pass) VALUES ('%s', '%s')" % (name, password))
    conn.commit()
    cur.close()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
    bot.send_message(
        message.chat.id,
        f"<u>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {name}!</u> –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
        parse_mode='html', reply_markup=markup)


def user_exists(chat_id):
    try:
        with sqlite3.connect('nachos_bot.sql') as conn:
            cur = conn.cursor()
            cur.execute("SELECT 1 FROM users WHERE id = ?", (chat_id,))
            return cur.fetchone() is not None
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


@bot.message_handler()
def help_section(message):
    bot.send_message(
        message.chat.id,
        "<u>üìñ –ü–æ–º–æ—â—å</u>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É –æ—Ç –∫—É—Ä—Å–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start: –ù–∞—á–Ω–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –ø–æ Python.\n"
        "/course: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ \"–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python\".\n"
        "/my_progress: –£–∑–Ω–∞–π—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –∫—É—Ä—Å–µ.\n"
        "/feedback: –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ –∏–ª–∏ —É—Ä–æ–∫–µ.\n"
        "/settings: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
        "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å \"–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python\".\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n\n"
        "<b>–ö–∞–∫ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç:</b>\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
        parse_mode='html')



@bot.message_handler()
def choice(message):
    bot.send_message(
        message.chat.id,
        "üìö –£ –Ω–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å:\n\n"
        "1Ô∏è‚É£ <u>–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python</u>\n\n"
        "üîç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!",
        parse_mode='html')


@bot.message_handler(content_types=['photo'])
def react(message):
    bot.reply_to(
        message,
        "üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é!"
    )


@bot.message_handler()
def recommendation(message):
    bot.send_message(
        message.chat.id,
        "üìö <u>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É—Ä—Å–∞:</u>\n\n"
        "1Ô∏è‚É£ <u>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</u>\n",
        parse_mode='html')

@bot.callback_query_handler(func = lambda callback: True)
def callback_message(callback):
    if callback.data == 'users':
        conn = sqlite3.connect('nachos_bot.sql')
        cur = conn.cursor()

        cur.execute("SELECT * FROM users")
        users = cur.fetchall()

        info = ''
        for i in users:
            info += f'–ò–º—è: {i[1]}, –ø–∞—Ä–æ–ª—å: {i[2]}\n'

        cur.close()
        conn.close()
        bot.send_message(callback.message.chat.id, info)

    elif callback.data == 'choice':
        choice(callback.message)

    elif callback.data == 'help_section':
        help_section(callback.message)

    elif callback.data == 'registration':
        registration(callback.message)



bot.polling(none_stop=True)